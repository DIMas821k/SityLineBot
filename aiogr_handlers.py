from functions.Player import Player, online_players
from loader import *
from data.library import *
from data.sql_ import *
from functions.Importis import *
from functions.TREE_DEC import Tree_Des
from aiogram import html
import math
from aiogram import Router
from config import admins
from aiogram.types import LabeledPrice, Message
router = Router()
dp.include_router(router)



class CreateStuff(StatesGroup):
    datas = State()
    sure = State()


def format_price(price):
    # –£–±–∏—Ä–∞–µ–º 'p' –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —á–∏—Å–ª–æ
    number = int(price)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Ç—ã—Å—è—á–∏
    formatted_number = "{:,.0f}".format(number).replace(",", ".")
    # –î–æ–±–∞–≤–ª—è–µ–º ' —Ä' –≤ –∫–æ–Ω–µ—Ü
    return f"{formatted_number} —Ä"


def add_back(builder: InlineKeyboardBuilder, back_id):
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data="back" + ":" + str(back_id)))


@router.callback_query(F.data == "help")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer("–º—É—Ä")


@router.callback_query(F.data == "Admin_panel")
async def Admin_panel(callback: types.CallbackQuery):
    player_ = online_players.get_players(callback.from_user.id)
    Text = f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, \n –¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω - {online_players.get_online()} –∏–≥—Ä–æ–∫–æ–≤ "
    builder = InlineKeyboardBuilder().add(types.InlineKeyboardButton(text="—É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞",
                                                                     callback_data="discon_player"))
    builder.add(types.InlineKeyboardButton(text="exit_python", callback_data="exit_py"))
    builder.add(types.InlineKeyboardButton(text="create_build", callback_data="create_build"))
    builder.add(types.InlineKeyboardButton(text="Add_money", callback_data="add_money"))
    await callback.message.answer(Text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "add_money")
async def add_money(callback: types.CallbackQuery):
    pass


@router.callback_query(F.data == "exit_py")
async def exit_py(callback: types.CallbackQuery):
    online_players.remove_players()
    sys.exit(0)


@router.callback_query(F.data == "discon_player")
async def del_player(callback: types.CallbackQuery):
    await online_players.rem_player(1777893126)


@router.callback_query(F.data[:4] == "back")
async def back(callback: types.CallbackQuery):
    dat_call = callback.data.split(":")
    back_id = dat_call[1]
    # datas = fetch_data_by_name("actions", "id", dat_call[1])
    # parent_id = datas[0][2]
    # datas = fetch_data_by_name("actions", "parent_id", parent_id)
    name, id_parent = Tree_Des.get_ancestors(back_id).name, Tree_Des.get_parent_id(back_id)
    # datas = fetch_data(name_table, name, id)
    text = ""

    builder = create_inline_keyboard_(id_parent)
    await bot.edit_message_text(text="‚óÄÔ∏è " + name + ",\n–ö—É–¥–∞ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–π—Ç–∏‚ùî",
                                chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder.as_markup()
                                )
    pass


@router.callback_query(F.data == "15")
async def statistik_building(callback: types.CallbackQuery):
    builds_dict = online_players.get_players(callback.from_user.id).get_builds()
    columns, values = list(builds_dict.keys()), list(builds_dict.values())
    text = "\n"
    count = 0
    for col, value in zip(columns, values):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º id –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        if value > 0:
            text += f"{col.replace('_', ' ')} - {value}\n"
            count += value
    text += f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n"
    builder = InlineKeyboardBuilder()
    add_back(builder, callback.data)
    await bot.edit_message_text(text=f"{callback.from_user.full_name}, " + text,
                                chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder.as_markup()
                                )
    pass


def problems_with_city(player: Player):
    list_problems = ["–≤–æ–¥–∞", "—ç–Ω–µ—Ä–≥–∏—è", ]

    text = ""
    for problem in list_problems:
        if int(player.statistic[problem]) <= 100 * math.exp(player.get_profile_data("LEVEL") // 10):
            text += f"<blockquote>–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {problem.replace('_', ' ')}, –∏–Ω–∞—á–µ –∂–∏—Ç–µ–ª–∏ –Ω–µ –±—É–¥—É—Ç –¥–æ–≤–æ–ª—å–Ω—ã.</blockquote>\n"

    if int(player.statistic["–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π_–º—É—Å–æ—Ä"]) <= 100 * math.exp(player.get_profile_data("LEVEL") // 10):
        text += (f"<blockquote>–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –º—É—Å–æ—Ä–∞, –∏–Ω–∞—á–µ –∂–∏—Ç–µ–ª–∏ –Ω–µ –±—É–¥—É—Ç "
                 f"–¥–æ–≤–æ–ª—å–Ω—ã.</blockquote>\n")

    total_citizens = player.statistic["–∂–∏—Ç–µ–ª–∏"]

    if int(total_citizens) == 0:
        text += "<blockquote>–í –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∂–∏—Ç–µ–ª–µ–π, –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –±–æ–ª—å—à–µ –¥–æ–º–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–æ–≥–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å </blockquote>\n"
    else:
        workers = player.statistic["—Ä–∞–±–æ—Ç—è–≥–∏"]
        unemployment_rate = (total_citizens - workers) / total_citizens * 100
        if unemployment_rate < 2:
            text += f"<blockquote>–í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ª—é–¥–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã, –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –±–æ–ª—å—à–µ –¥–æ–º–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–æ–≥–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å </blockquote>\n"
        elif unemployment_rate > 5:
            text += (
                f"<blockquote>–í –≥–æ—Ä–æ–¥–µ —Å–ª–∏—à–∫–æ–º –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã—Ö, –ø—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã - {round(unemployment_rate, 2)} , "
                f"—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å"
                f"–±–æ–ª—å—à–µ –∑–∞–≤–æ–¥–æ–≤</blockquote>\n")
    return text


@router.callback_query(F.data == "35")
async def profile(callback: types.CallbackQuery):
    player = online_players.get_players(callback.from_user.id)
    money = player.get_money()
    text = f"""{callback.from_user.full_name}, –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n
    üîé ID: {callback.from_user.id}\n
    üí∞ –ë–∞–ª–∞–Ω—Å: {player.get_money()}\n
    –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {player.statistic["–ü—Ä–∏–±—ã–ª—å"]}\n
    –°—á–∞—Å—Ç—å–µ –≥–æ—Ä–æ–¥–∞: {round(player.profile["happines"], 2)}%\n
    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–¥—ã: {player.statistic['–≤–æ–¥–∞']}\n
    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏: {player.statistic['—ç–Ω–µ—Ä–≥–∏—è']}\n
    –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º—É—Å–æ—Ä–∞: {player.statistic['–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π_–º—É—Å–æ—Ä']}\n
    –û–ø—ã—Ç: {player.statistic['exp']}\n
    –£—Ä–æ–≤–µ–Ω—å: {player.get_profile_data("LEVEL")}\n
    –û–ø—ã—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {player.profile['EXP_NEXT']}\n
{problems_with_city(player)}
    """

    builder = InlineKeyboardBuilder().add(types.InlineKeyboardButton(text="Inventory", callback_data="Inventory"))
    builder.add(types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="35"))
    add_back(builder, 1)

    await bot.edit_message_text(text=text,
                                chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML
                                )
    pass


@router.callback_query(F.data == "create_item")
async def create_item(message: Message, state: FSMContext):
    flag = True
    while flag:
        text = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω\n –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:type:—Ü–µ–Ω–∞:–¥–æ—Å—Ç—É–ø_—É—Ä–æ–≤–µ–Ω—å:info"
        await message.answer(text)
        await state.set_state(CreateStuff.datas)
        await state.update_data(datas=message.text)
        datas = await state.get_data()

        button1 = KeyboardButton(text="–î–∞")
        button2 = KeyboardButton(text="–ù–µ—Ç")
        markup = ReplyKeyboardMarkup(keyboard=[[button1, button2]], resize_keyboard=True)
        await message.answer(f"–≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö?:{datas['datas']}", reply_markup=markup)
        await state.set_state(CreateStuff.sure)
        await state.update_data(datas=message.text)
        sure = await state.get_data()
        sure = sure['datas']
        if sure == "–¥–∞":
            flag = False
            await state.clear()
            datas = datas["datas"].split(":")
            columns = ["from_id", "–Ω–∞–∑–≤–∞–Ω–∏–µ", "TYPE",
                       "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "ACCESSES_FROM", "exp", "DELETE_FROM", "INFO"]
            result = ', '.join(map(lambda x: '0' if x == '' else x, datas))

            insert_row("STORE", columns, result)
            await message.answer("–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω", reply_markup=None)


@router.callback_query(F.data == "add_stuff")
async def add_stuff(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="35"))
    builder.add(types.InlineKeyboardButton(text="–î–æ–º", callback_data="create_build"))
    builder.add(types.InlineKeyboardButton(text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="create_item"))
    await bot.edit_message_text(text="–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
                                chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder.as_markup()
                                )


@router.callback_query(F.data == "Inventory")
async def inventory(callback: types.CallbackQuery):
    inventory = online_players.get_players(callback.from_user.id).inventory

    items = []

    for item in inventory:
        if inventory[item] == 0 or inventory[item] == "0":
            items.append("–ù–∏—á–µ–≥–æ –Ω–µ—Ç")
        else:
            items.append(inventory[item])
    print(items)
    text = \
        (
            f"–í–µ—Ä—Ö–Ω–∏–π —É–±–æ—Ä: {items[0]}\n"
            f"–í–∞—à–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ:  {items[1]}\n"
            f"–ü–∏—Ç–æ–º–µ—Ü : {html.bold(items[2])}\n")

    builder = InlineKeyboardBuilder().add(types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="1"))
    add_back(builder, 35)
    await bot.edit_message_text(text=text,
                                chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder.as_markup()
                                )


@router.callback_query(F.data[:3] == "dec")
async def decision(callback: types.CallbackQuery):
    dat_call = callback.data.split(":")
    builder, text = create_inline_builds(int(dat_call[2]), callback.from_user.id)

    await bot.edit_message_text(text="–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∫—É–ø–∏—Ç—å?\n" + text,
                                chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder.as_markup(), parse_mode="HTML"
                                )
    pass


def switcher(id_):
    if id_ == 41:
        return 1
    elif id_ == 14:
        return 0


def create_inline_builds(id_, user_id):
    childrens = Tree_Des.get_children(id_)
    text = ""
    builder = InlineKeyboardBuilder()
    childr = Tree_Des.get_node(id_)
    player = online_players.get_players(user_id)
    buildings = player.get_builds()
    text = f"{html.italic(childr.optional_datas['COMMENT'])}\n–í—ã–±–µ—Ä–∏—Ç–µ:\n"
    for child in childrens:

        name_build = child.name
        price = child.options()['—Å—Ç–æ–∏–º–æ—Å—Ç—å']

        adjusted_price = price * math.exp(1 / 10 * (buildings.get(name_build, 1)))
        adjusted_price = int(adjusted_price)
        if len(name_build) > 62 or len(str(adjusted_price)) > 63 or len(str(child.optional_datas['exp'])) > 63:
            assert "–ü—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ inline –∫–Ω–æ–ø–∫–µ"
        if int(child.optional_datas["ACCESSES_FROM"]) < player.get_profile_data("LEVEL") < int(
                child.optional_datas["DELETE_FROM"]):
            builder.add(types.InlineKeyboardButton(text=name_build[:62],
                                                   callback_data=f"buy:"
                                                                 f"{str(name_build).replace('_', ' ')}:"
                                                                 f"{adjusted_price}:{child.optional_datas['exp']}:"))

            text += (html.bold(str(name_build).replace("_", " "))
                     + ": " + html.code(str(format_price(adjusted_price))) + '\n')
            text += "characteristic: \n<blockquote>"
            text += child.optional_datas['INFO'] + '</blockquote>\n'
    add_back(builder, id_)
    builder.adjust(3)
    return builder, text


def create_inline_keyboard_start(datas, back="1"):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    datas (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏–π. –ö–∞–∂–¥—ã–π –∫–æ—Ä—Ç–µ–∂ —Å–æ–¥–µ—Ä–∂–∏—Ç:
                   (id, –Ω–∞–∑–≤–∞–Ω–∏–µ_–¥–µ–π—Å—Ç–≤–∏—è, parent_id, category_id, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)
    back (str, optional): –°—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–Ω–∞–∑–∞–¥'.
                          –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–æ "1".

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    InlineKeyboardBuilder: –≠–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardBuilder —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏.
    """
    builder = InlineKeyboardBuilder()
    text = "somet"
    for i in range(1, len(datas)):

        if datas[i][5] == 0:
            continue
        else:
            builder.add(types.InlineKeyboardButton(text=str(datas[i][1]), callback_data=str(datas[i][0])))
    return builder


def create_inline_keyboard(datas, back="1"):
    builder = InlineKeyboardBuilder()
    text = "somet"
    if datas[0][3] == 1:
        for data in datas:
            if data[5] == 0:
                continue
            else:
                builder.add(types.InlineKeyboardButton(text=str(data[1]), callback_data="dec" + ":"
                                                                                        + "1" + ":" + str(data[0])))
    else:
        for data in datas:
            if data[5] == 0:
                continue
            else:
                builder.add(types.InlineKeyboardButton(text=str(data[1]), callback_data=str(data[0])))
    if str(datas[0][2]) != "1":
        builder.add(types.InlineKeyboardButton(text="–Ω–∞–∑–∞–¥", callback_data="back:" + str(datas[0][2])))
    builder.adjust(3)
    return builder


def create_inline_keyboard_(id, back="1", level=1):
    childrens = Tree_Des.get_children(id)
    builder = InlineKeyboardBuilder()
    end = 1 if childrens[0].is_leaf else 0

    callback_text = f"dec:{end}:" if end else ""
    for child in childrens:
        if child.visible and level > int(child.optional_datas["ACCESSES_FROM"]):
            builder.add(types.InlineKeyboardButton(text=str(child.name),
                                                   callback_data=callback_text + str(child.node_id)))
    builder.adjust(3)

    if id != "1":
        builder.row(types.InlineKeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data=f"back:{id}"))
    #
    return builder





def add_user(user_id, username, referrer_id=None):
    conn = sqlite3.connect(database_path)
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
    if cursor.fetchone() is None:
        print("new_player")
        cursor.execute('INSERT INTO users (id, username, referrer_id) VALUES (?, ?, ?)',
                       (user_id, username, referrer_id))
        conn.commit()


def is_new_user(user_id):
    conn = sqlite3.connect(database_path)
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
    return cursor.fetchone() is None


async def send_tutorial(message: Message):
    tutorial_text = """

üìú –û—Å–Ω–æ–≤–Ω–æ–µ
–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã. –í–æ—Ç, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏:

üåÜ –ú–æ–π –≥–æ—Ä–æ–¥
–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –≥–æ—Ä–æ–¥–æ–º. 
–û–Ω –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
–í –Ω–µ–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ:

2. üî® –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ
–°–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å! –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –∑–¥–∞–Ω–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ.
–î–∞–ª–µ–µ –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Å—Ç—Ä–æ–µ–Ω–∏–π:

–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è ‚Äî –≤–∞–∂–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.
–ñ–∏–ª—ã–µ –∑–¥–∞–Ω–∏—è ‚Äî —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥–æ–º–∞ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –≥–æ—Ä–æ–¥–∞.
–†–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ ‚Äî –ø–æ—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–±—Ä–∏–∫–∏, –æ—Ñ–∏—Å—ã –∏ –¥—Ä—É–≥–∏–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –≤–∞—à–∏—Ö –≥–æ—Ä–æ–∂–∞–Ω.
–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –∏ –î–æ–±—ã—á–∞ –≤–æ–¥—ã ‚Äî –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏.
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
–ü–æ–º–∏–º–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ:

–í —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–æ—Ñ–∏–ª—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –≤–µ—â–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
–ü–æ–∫—É–ø–∞—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.
–ß—Ç–æ –¥–∞–ª—å—à–µ?
–¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∏–Ω–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥! –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª—ã, —Å—Ç—Ä–æ–π—Ç–µ –∑–¥–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É.
–°–ª–µ–¥–∏—Ç–µ –∑–∞ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ –¥–µ–ª–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è.

–ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    await message.answer(tutorial_text, parse_mode=ParseMode.HTML)


@router.message(Command("start"))
async def start(message: Message) -> None:
    """
    This function handles the '/start' command and sends a welcome message to the user.
    It also initializes the inline keyboard with the available sections for the user to navigate.

    Parameters:
    message (Message): The Telegram message object containing the user's command.

    Returns:
    None
    """

    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º
    if is_new_user(user_id):
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        args = message.text.split()

        referrer_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        add_user(user_id, username, referrer_id)
        name_pet = "–í–æ–ª–∫"
        online_players.get_players(user_id).inventory["–ü–∏—Ç–æ–º–µ—Ü"] = name_pet

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! "
                             f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ! {'–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID ' + str(referrer_id) if referrer_id else ''}",
                             parse_mode=ParseMode.HTML)
        await send_tutorial(message)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    datas = fetch_data_by_name("actions", "parent_id", 1)
    builder = create_inline_keyboard_start(datas)
    if message.from_user.id in admins:
        builder.add(types.InlineKeyboardButton(text="Secret", callback_data="Admin_panel"))

    await message.answer("–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "üí° –†–∞–∑–¥–µ–ª—ã:\n"
                         "üíé –û—Å–Ω–æ–≤–Ω–æ–µ\n"
                         "üöÄ –ü—Ä–æ—Ñ–∏–ª—å\n"
                         "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ ¬´–ü–æ–º–æ—â—å [–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞]¬ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
                         reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)


@router.message(Command('referral'))
async def referral_command(message: types.Message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    await message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")


# –ö–æ–º–∞–Ω–¥–∞ /my_referrals –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(Command('my_referrals'))
async def my_referrals_command(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect(database_path)
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT id, username FROM users WHERE referrer_id = ?', (user_id,))
    referrals = cursor.fetchall()

    if referrals:
        referral_list = "\n".join([f"ID: {ref_id}, –ò–º—è: {ref_username}" for ref_id, ref_username in referrals])
        await message.answer(f"–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n{referral_list}")
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")


@router.callback_query()
async def move(callback: types.CallbackQuery, last=""):
    childr = Tree_Des.get_node(callback.data)

    text = f"{html.bold(callback.from_user.full_name)},  {childr.name} \n{childr.optional_datas['COMMENT']}"
    builder = create_inline_keyboard_(callback.data,
                                      level=online_players.get_players(callback.from_user.id).get_profile_data("LEVEL"))
    await bot.edit_message_text(text=text,
                                chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder.as_markup(), parse_mode="HTML"
                                )
